name: Update San Siro Calendar ICS

on:
  #schedule:
    # Esegue ogni giorno alle 03:00 UTC (puoi cambiarlo)
    # Formato CRON: minuti ore giorno-del-mese mese giorno-della-settimana
    # Vedi https://crontab.guru/ per aiuto con la sintassi CRON
   # - cron: '0 3 * * *'
  workflow_dispatch: # Permette l'esecuzione manuale dall'interfaccia di GitHub

jobs:
  build-calendar:
    runs-on: ubuntu-latest
    # AGGIUNGI QUESTA SEZIONE 'permissions' QUI:
    permissions:
      contents: write # Permette al workflow di fare commit e push al repository
      # Se in futuro l'azione dovesse creare Pull Request, aggiungeresti:
      # pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # o v3, v2 a seconda delle tue preferenze/necessità

      - name: Set up Python
        uses: actions/setup-python@v5 # o v4
        with:
          python-version: '3.11' # Scegli una versione Python recente

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests icalendar pytz

      - name: Run script to generate ICS file
        run: python merge_calendars.py # SOSTITUISCI con il nome del tuo file .py

      - name: Commit and push if changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          ICS_FILE_PATH="${{ env.OUTPUT_ICS_FILENAME || 'eventi_san_siro_merged.ics' }}" # Assicurati che questa sia la path corretta al file generato
          TEMP_ICS_NAME=".${ICS_FILE_PATH}.temp_generated_by_workflow" # Nome del file temporaneo

          # Verifica che il file generato esista prima di continuare
          if [ ! -f "$ICS_FILE_PATH" ]; then
            echo "Errore: Il file ICS generato '$ICS_FILE_PATH' non è stato trovato!"
            exit 1
          fi
          
          echo "Spostamento temporaneo del file generato $ICS_FILE_PATH a $TEMP_ICS_NAME"
          mv "$ICS_FILE_PATH" "$TEMP_ICS_NAME"
          
          echo "Pull delle modifiche più recenti da origin/main..."
          # Facciamo un pull per aggiornare la working directory.
          # Se ci fossero modifiche locali non committate (a parte il file generato),
          # questo potrebbe fallire. actions/checkout di solito fornisce una copia pulita.
          git pull origin main
          
          echo "Ripristino del file generato dal workflow $ICS_FILE_PATH da $TEMP_ICS_NAME"
          # Sposta indietro il file generato, sovrascrivendo la versione di $ICS_FILE_PATH
          # che potrebbe essere stata scaricata dal pull.
          # Questo assicura che la versione del file sia quella appena generata dallo script.
          mv "$TEMP_ICS_NAME" "$ICS_FILE_PATH"
          
          echo "Aggiunta del file $ICS_FILE_PATH all'area di staging..."
          git add "$ICS_FILE_PATH"
          
          echo "Controllo delle differenze da committare..."
          # Controlla se ci sono modifiche nell'area di staging rispetto all'ultimo commit (HEAD)
          if ! git diff --staged --quiet; then
            echo "Commit e push delle modifiche per $ICS_FILE_PATH..."
            git commit -m "Aggiornamento automatico calendario: $ICS_FILE_PATH (workflow)"
            git push
          else
            echo "Nessuna modifica significativa al file $ICS_FILE_PATH da committare."
            echo "Il file generato è identico a quello presente su main dopo il pull, o non è stato modificato."
          fi
        env:
          # Assicurati che OUTPUT_ICS_FILENAME sia impostata correttamente dallo step precedente
          # Se il tuo file è sempre 'eventi_san_siro_merged.ics' nella root, puoi anche ometterla qui
          # e usare direttamente il nome del file.
          OUTPUT_ICS_FILENAME: ${{ env.OUTPUT_ICS_FILENAME }}
