name: Update San Siro Calendar ICS

on:
  schedule:
    # Esegue ogni giorno alle 03:00 UTC (puoi cambiarlo)
    # Formato CRON: minuti ore giorno-del-mese mese giorno-della-settimana
    # Vedi https://crontab.guru/ per aiuto con la sintassi CRON
    - cron: '0 3 * * *'
  workflow_dispatch: # Permette l'esecuzione manuale dall'interfaccia di GitHub

jobs:
  build-calendar:
    runs-on: ubuntu-latest
    # AGGIUNGI QUESTA SEZIONE 'permissions' QUI:
    permissions:
      contents: write # Permette al workflow di fare commit e push al repository
      # Se in futuro l'azione dovesse creare Pull Request, aggiungeresti:
      # pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # o v3, v2 a seconda delle tue preferenze/necessità

      - name: Set up Python
        uses: actions/setup-python@v5 # o v4
        with:
          python-version: '3.11' # Scegli una versione Python recente

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests icalendar pytz

      - name: Run script to generate ICS file
        run: python merge_calendars.py # SOSTITUISCI con il nome del tuo file .py

      - name: Commit and push if changed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          ICS_FILE_PATH="${{ env.OUTPUT_ICS_FILENAME || 'eventi_san_siro_merged.ics' }}"

          # Controlla se ci sono modifiche locali al file ICS prima di fare il pull
          # Se ci sono, mettile da parte (stash)
          # Usiamo "git status --porcelain" per vedere se ci sono modifiche non committate
          if ! git diff --quiet HEAD -- "$ICS_FILE_PATH"; then
            echo "Stashing local changes to $ICS_FILE_PATH"
            # Stash solo il file specifico se è modificato, includi anche untracked files (-u) se il file potrebbe essere nuovo
            git stash push -u -m "temp_ics_update_stash" -- "$ICS_FILE_PATH"
          fi
          
          # Tira le modifiche più recenti dal repository remoto
          # Potresti voler usare --rebase per una history più pulita, ma un merge normale è ok
          echo "Pulling latest changes from origin/main..."
          git pull origin main
          
          # Se avevamo messo da parte delle modifiche, prova a riapplicarle
          # Cerca uno stash con il nostro messaggio specifico
          STASH_ENTRY=$(git stash list --grep="temp_ics_update_stash" -n 1 --pretty=%H)
          if [ -n "$STASH_ENTRY" ]; then
            echo "Applying stashed changes for $ICS_FILE_PATH..."
            git stash pop
            # Se ci sono conflitti dopo il pop, lo script fallirà qui,
            # indicando che è necessario un intervento manuale per risolvere i conflitti.
          fi
          
          # Aggiungi il file (ora aggiornato o ripristinato dallo stash)
          git add "$ICS_FILE_PATH"
          
          # Controlla se ci sono modifiche da committare
          if ! git diff --staged --quiet; then
            git commit -m "Aggiornamento automatico calendario eventi San Siro"
            git push
          else
            echo "Nessuna modifica significativa al calendario da committare dopo pull/stash."
          fi
